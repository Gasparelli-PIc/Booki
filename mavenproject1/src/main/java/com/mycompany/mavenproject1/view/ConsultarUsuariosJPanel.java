package com.mycompany.mavenproject1.view;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import com.mycompany.mavenproject1.App;
import com.mycompany.mavenproject1.dao.UsuarioDAO;
import com.mycompany.mavenproject1.model.Users;
import com.mycompany.mavenproject1.dao.TipoLivroDAO;
import com.mycompany.mavenproject1.model.TipoLivro;

public class ConsultarUsuariosJPanel extends javax.swing.JPanel {
    
    private App app;

    public ConsultarUsuariosJPanel() {
        initComponents();
        carregarUsuariosNaTabela();
        
        ConsultarUsuariosjTable1.getColumnModel().getColumn(0).setMinWidth(0);
        ConsultarUsuariosjTable1.getColumnModel().getColumn(0).setMaxWidth(0);
        ConsultarUsuariosjTable1.getColumnModel().getColumn(0).setPreferredWidth(0);
    }
    
    public void setApp(App app) {
    this.app = app;
    }
   
    public ConsultarUsuariosJPanel(App aThis) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    // Método para carregar os usuários na tabela
    public void carregarUsuariosNaTabela() {
        UsuarioDAO dao = new UsuarioDAO();
        TipoLivroDAO tipoDao = new TipoLivroDAO(); 

        List<Users> usuarios = dao.listarTodos();

        // Ordena em ordem alfabética
        usuarios.sort((u1, u2) -> u1.getNome().compareToIgnoreCase(u2.getNome()));

        DefaultTableModel modelo = (DefaultTableModel) ConsultarUsuariosjTable1.getModel();
        modelo.setRowCount(0); // Limpa as linhas da tabela

        for (Users u : usuarios) {
            String tipoUsuario = u.getAdministrador() ? "Administrador" : "Comum";

            // --- Início da Lógica Modificada ---

            // Busca o nome do Tipo Preferido 1
            int idTipo1 = u.getTipoPreferido1();
            TipoLivro tipo1 = tipoDao.buscarPorId(idTipo1);
            String nomeTipo1 = (tipo1 != null) ? tipo1.getTipo() : ""; // Se não tiver, fica em branco

            // Busca o nome do Tipo Preferido 2
            int idTipo2 = u.getTipoPreferido2();
            TipoLivro tipo2 = tipoDao.buscarPorId(idTipo2);
            String nomeTipo2 = (tipo2 != null) ? tipo2.getTipo() : ""; // Se não tiver, fica em branco

            // --- Fim da Lógica Modificada ---

            modelo.addRow(new Object[]{
                u.getId(),
                u.getNome(),
                tipoUsuario,
                u.getIdade(),
                nomeTipo1, // <-- Usamos a variável com o nome aqui
                nomeTipo2  // <-- E aqui
                });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ConsultarUsuariosjTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        ExcluirJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(31, 79, 144));
        setMinimumSize(new java.awt.Dimension(600, 400));

        ConsultarUsuariosjTable1.setAutoCreateRowSorter(true);
        ConsultarUsuariosjTable1.setBackground(new java.awt.Color(255, 255, 255));
        ConsultarUsuariosjTable1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        ConsultarUsuariosjTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Nome", "Login", "Usuário", "Idade", "Favorito 1", "Favorito 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        ConsultarUsuariosjTable1.setToolTipText("");
        ConsultarUsuariosjTable1.setMaximumSize(new java.awt.Dimension(565, 285));
        ConsultarUsuariosjTable1.setMinimumSize(new java.awt.Dimension(565, 285));
        ConsultarUsuariosjTable1.setName(""); // NOI18N
        ConsultarUsuariosjTable1.setPreferredSize(new java.awt.Dimension(565, 280));
        jScrollPane1.setViewportView(ConsultarUsuariosjTable1);

        jButton1.setBackground(new java.awt.Color(212, 51, 51));
        jButton1.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Sair");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ExcluirJButton.setBackground(new java.awt.Color(0, 0, 0));
        ExcluirJButton.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        ExcluirJButton.setForeground(new java.awt.Color(255, 255, 255));
        ExcluirJButton.setText("Excluir");
        ExcluirJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExcluirJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(ExcluirJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(151, 151, 151)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ExcluirJButton)
                    .addComponent(jButton1))
                .addGap(0, 55, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        app.getCardLayout().show(app.getContainer(), "Admin");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ExcluirJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExcluirJButtonActionPerformed
     int linhaSelecionada = ConsultarUsuariosjTable1.getSelectedRow();
    
    if (linhaSelecionada != -1) {
        DefaultTableModel modelo = (DefaultTableModel) ConsultarUsuariosjTable1.getModel();
        
        int id = Integer.parseInt(modelo.getValueAt(linhaSelecionada, 0).toString()); 

        int confirmacao = JOptionPane.showConfirmDialog(this,
                "Deseja realmente excluir este usuário?", "Confirmação",
                JOptionPane.YES_NO_OPTION);

        if (confirmacao == JOptionPane.YES_OPTION) {
            UsuarioDAO dao = new UsuarioDAO();
            dao.deletar(id);
            modelo.removeRow(linhaSelecionada);
            JOptionPane.showMessageDialog(this, "Usuário excluído com sucesso.");
        }

    } else {
        JOptionPane.showMessageDialog(this, "Selecione um usuário para excluir.");
    }
    }//GEN-LAST:event_ExcluirJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ConsultarUsuariosjTable1;
    private javax.swing.JButton ExcluirJButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
